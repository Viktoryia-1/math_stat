# Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания
# a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.
import scipy.stats
import numpy
o_1 = 16
y_1 = 0.95
x_med_1 = 80
n_1 = 100

# Решение
t_value = y_1/ 2

x = numpy.arange(0, 5, 0.01)
a = scipy.stats.norm.cdf((x)) - 0.5

for el in list(a).copy():
    if round(el, 3) == t_value:
        ind = list(a).index(el)
t_1 = list(x)[ind]

delta_1 = (t_1 * o_1) / numpy.sqrt(n_1)

print(f"Доверительный интервал: ({x_med_1 - delta_1},"
      f" {x_med_1 + delta_1})")


# В результате 10 независимых измерений некоторой величины X,
# выполненных с одинаковой точностью,
# получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону
# распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала,
# покрывающего это значение с доверительной вероятностью 0,95.

data = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
n_2 = 10
y_2 = 0.95
x_med_2 = round(sum(data) / n_2, 3)

dis_2 = sum([el ** 2 - x_med_2 ** 2 for el in data]) / n_2
dis_2_correct = round((dis_2 * 10) / 9, 3)
s_correct = round(dis_2_correct ** 0.5, 3)
t_2 = round(scipy.stats.t.ppf(y_2, n_2-1), 3)

delta_2 = (t_2 * s_correct) / n_2 ** 0.5

print(f"Доверительный интервал: {round(x_med_2 - delta_2, 3)},"
      f" {round(x_med_2 - delta_2, 3)}")

# Утверждается, что шарики для подшипников, изготовленные автоматическим
# станком, имеют средний диаметр 17 мм.
# Используя односторонний критерий с α=0,05, проверить эту гипотезу,
# если в выборке из n=100 шариков средний диаметр
# оказался равным 17.5 мм, а дисперсия известна и равна 4 мм.

# H_o
a = 17
l = 0.05
n_2 = 100
x_med_3 = 17.5
o_2 = 4

l_value = (1 - 2 * l) / 2

x_3 = numpy.arange(0, 5, 0.01)
l = scipy.stats.norm.cdf((x_3)) - 0.5

l_list = []
for el in list(l).copy():
    if round(el, 2) == l_value:
        l_list.append(list(l).index(el))

index = round(sum(l_list) / len(l_list))

u_3 = round(list(x_3)[index], 2)
u_emp_3 = (x_med_3 - a) * numpy.sqrt(n_2) / o_2

if u_emp_3 < u_3:
    print(f"На уровне значимости 0.05  гипотезу Н_о а = 17 принимаем ")
else:
    print(f"На уровне значимости 0.05 гипотезу Н_о а = 17 не принимаем")


# Продавец утверждает, что средний вес пачки печенья составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность
# равна 99%?

bis = [202, 203, 199, 197, 195, 201, 200, 204, 194, 190]
n_4 = 10
p = 0.99
l_4_start = p / 2
hyp_0 = 200

x_med_4 = sum(bis) / n_4
dis_4 = (sum([el ** 2 - x_med_4 ** 2 for el in bis]) / 10)
dis_4_correct = (dis_4 * 10) / 9
s_correct_4 = dis_4_correct ** 0.5

x_4 = numpy.arange(0, 5, 0.01)
l_4 = scipy.stats.norm.cdf((x_4)) - 0.5

l_list_4 = []
for el in list(l_4).copy():
    if round(el, 3) == l_4_start:
        l_list_4.append(list(l).index(el))

index = round(sum(l_list_4) / len(l_list_4))

u_4 = round(list(x_4)[index], 2)
u_emp_4 = ((x_med_4 - hyp_0) * n_4 ** 0.5) / s_correct_4

if - u_4 < u_emp_4 < u_4:
    print(f"При доверительной вероятности 99% гипотезу Н_о а = 200 принимаем ")
else:
    print(f"При доверительной вероятности 99% гипотезу Н_о а = 200 не  принимаем")